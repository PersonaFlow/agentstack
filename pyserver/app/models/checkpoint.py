from datetime import datetime
import uuid
from sqlalchemy import Column, String, LargeBinary, text, DateTime
from sqlalchemy.dialects.postgresql import UUID, JSONB
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy.sql import func
from app.core.configuration import settings
from app.models.base import Base

class PostgresCheckpoint(Base):
    __tablename__ = 'checkpoints'
    __table_args__ = {"schema": settings.INTERNAL_DATABASE_SCHEMA}

    id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=True),
        primary_key=True,
        server_default=text("gen_random_uuid()"),
        comment="A unique identifier for the checkpoint. It's a UUID type and is automatically generated by the database."
    )
    user_id: Mapped[str] = mapped_column(
        String(),
        nullable=False,
        comment="The ID of the user to whom the checkpoint belongs."
    )
    thread_id: Mapped[str] = mapped_column(
        String(),
        nullable=False,
        comment="The ID of the thread to which the checkpoint belongs."
    )
    checkpoint: Mapped[LargeBinary] = mapped_column(
        LargeBinary(),
        nullable=False,
        comment="The serialized checkpoint data."
    )
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        default=func.now(),
        nullable=False,
        comment="The timestamp when the checkpoint was created."
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        default=func.now(),
        onupdate=func.now(),
        nullable=False,
        comment="The timestamp when the checkpoint was last updated."
    )
