from datetime import datetime
import uuid
from sqlalchemy import String, text, DateTime, func
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy.dialects.postgresql import UUID, JSONB
from pyserver.app.core.configuration import settings
from pyserver.app.models.base import Base


class Thread(Base):
    __tablename__ = "threads"
    __table_args__ = {"schema": settings.INTERNAL_DATABASE_SCHEMA}

    id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=True),
        primary_key=True,
        server_default=text("gen_random_uuid()"),
        comment="A unique identifier for the thread. It's a UUID type and is automatically generated by the database.",
    )
    user_id: Mapped[str] = mapped_column(
        String(), index=True, comment="The ID of the user who initiated the thread."
    )
    assistant_id: Mapped[str] = mapped_column(
        String(),
        nullable=True,
        comment="The ID of the assistant that is associated with the thread.",
    )
    name: Mapped[str] = mapped_column(
        String(), nullable=True, comment="The title of the thread."
    )
    kwargs: Mapped[JSONB] = mapped_column(
        JSONB(),
        nullable=True,
        comment="Additional arguments associated with the thread.",
    )
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        default=func.now(),
        nullable=False,
        comment="Created date",
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        default=func.now(),
        onupdate=func.now(),
        nullable=False,
        index=True,
        comment="Last updated date",
    )
