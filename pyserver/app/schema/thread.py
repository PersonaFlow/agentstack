"""
schema/thread.py
---------------

This module provides Pydantic models for thread data serialization, validation, and response formatting.

"""
from pydantic import BaseModel, Field, validator
from typing import List, Optional
import uuid
from datetime import datetime

class Thread(BaseModel):
    id: uuid.UUID = Field(..., description="A unique identifier for the thread. It's a UUID type and is automatically generated by the database.")
    user_id: str = Field(..., description="The user id associated with the thread.")
    assistant_id: str = Field(None, description="(Optional) The assistant id associated with the thread.")
    name: Optional[str] = Field(None, description="(Optional) The conversation title of the thread.")
    kwargs: Optional[dict] = Field(None, description="(Optional) Additional kwargs associated with the thread.")
    created_at: datetime = Field(..., description="Created date")
    updated_at: datetime = Field(..., description="Last updated date")

    class Config:
        from_attributes = True

class CreateThreadSchema(BaseModel):
    assistant_id: str = Field(..., description="(Optional) The assistant id associated with the thread.")
    user_id: str = Field(..., description="The user id associated with the thread.")
    name: Optional[str] = Field(None, description="(Optional) The conversation title of the thread.")
    kwargs: Optional[dict] = Field(None, description="(Optional) Additional kwargs associated with the thread.")

    @validator('user_id')
    def must_not_be_empty(cls, v):
        if not v:
            raise ValueError('This field must not be empty')
        return v

class UpdateThreadSchema(BaseModel):
    assistant_id: Optional[str] = Field(None, description="(Optional) The assistant id associated with the thread.")
    name: Optional[str] = Field(None, description="(Optional) The conversation title of the thread.")
    kwargs: Optional[dict] = Field(None, description="(Optional) Additional kwargs associated with the thread.")

class GroupedThreads(BaseModel):
    Today: Optional[List[Thread]] = Field(None, alias='Today')
    Yesterday: Optional[List[Thread]] = Field(None, alias='Yesterday')
    Past_7_Days: Optional[List[Thread]] = Field(None, alias='Past 7 Days')
    Past_30_Days: Optional[List[Thread]] = Field(None, alias='Past 30 Days')
    This_Year: Optional[List[Thread]] = Field(None, alias='This Year')
    Previous_Years: Optional[List[Thread]] = Field(None, alias='Previous Years')

    class Config:
        populate_by_name = True
