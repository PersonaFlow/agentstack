"""
schema/user.py
---------------

This module provides Pydantic models for user data serialization, validation, and response formatting.

"""
import uuid
from datetime import datetime
from pydantic import BaseModel, Field, validator
from typing import Optional

class User(BaseModel):
    """
    model representing a registered user in the application.
    """
    # id: uuid.UUID = Field(..., description="A unique internal identifier for the user. It's a UUID type and is automatically generated by the database.")
    user_id: str = Field(..., description="Unique identifier for the user to be used across the application. Set once when the user is created and cannot be updated thereafter. Can be used for correlating local user with external systems. Autogenerates if none is provided.")
    username: Optional[str] = Field(None, description="(Optional) The username chosen by the user. It's a string type and does not need to be unique across the userbase.")
    email: Optional[str] = Field(None, description="(Optional) The email address associated with the user's account. It's a string type and is expected to be unique across the userbase")
    first_name: Optional[str] = Field(None, description="(Optional) The first name of the user.")
    last_name: Optional[str] = Field(None, description="(Optional) The last name of the user.")
    kwargs: Optional[dict] = Field(None, description="(Optional) Additional kwargs associated with the user.")
    created_at: datetime = Field(..., description="Created date")
    updated_at: datetime = Field(..., description="Last updated date")

    class Config:
        from_attributes = True
        json_encoders = {
            datetime: lambda v: v.isoformat(),
        }

class CreateUserSchema(BaseModel):
    user_id: Optional[str] = Field(None, description="Identifier for the user to be used across the application. Can be used for correlating local user with external systems. Autogenerates if none is provided.")
    username: Optional[str] = Field(None, description="(Optional) The username chosen by the user. It's a string type and does not need to be unique across the userbase.")
    email: Optional[str] = Field(None, description="(Optional) The email address associated with the user's account. It's a string type and is expected to be unique across the userbase")
    first_name: Optional[str] = Field(None, description="(Optional) The first name of the user.")
    last_name: Optional[str] = Field(None, description="(Optional) The last name of the user.")
    kwargs: Optional[dict] = Field(None, description="(Optional) Additional kwargs associated with the user.")

class UpdateUserSchema(BaseModel):
    username: Optional[str] = Field(None, description="(Optional) The username chosen by the user. It's a string type and does not need to be unique across the userbase.")
    password: Optional[str] = Field(None, description="(Optional) The hashed password associated with the user's account. Only used when internal authentication is enabled.")
    email: Optional[str] = Field(None, description="(Optional) The email address associated with the user's account. It's a string type and is expected to be unique across the userbase")
    first_name: Optional[str] = Field(None, description="(Optional) The first name of the user.")
    last_name: Optional[str] = Field(None, description="(Optional) The last name of the user.")
    kwargs: Optional[dict] = Field(None, description="(Optional) Additional kwargs associated with the user.")

