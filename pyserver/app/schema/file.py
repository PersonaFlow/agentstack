from pydantic import BaseModel, Field
import uuid
from typing import Optional
from datetime import datetime
from fastapi import UploadFile, File



class FileSchema(BaseModel):
    id: uuid.UUID = Field(..., description="A unique identifier for the file. It's a UUID type and is automatically generated by the database.")
    user_id: str = Field(..., description="The ID of the user who created the file.")
    purpose: str = Field(..., description="The purpose of the file: 'assistants', 'threads', or 'personas'.")
    filename: str = Field(..., description="The preferred name for the file.")
    bytes: int = Field(..., description="The file size in bytes, calculated when the file is uploaded.")
    mime_type: str = Field(..., description="The mime type of the file.")
    kwargs: dict = Field(..., description="Any additional kwargs for the file.")
    created_at: datetime = Field(..., description="Created date")
    updated_at: datetime = Field(..., description="Last updated date")

    class Config:
        from_attributes = True

class UploadFileSchema(BaseModel):
    purpose: str = Field(..., description="The purpose of the file: 'assistants', 'threads', or 'personas'.")
    user_id: Optional[str] = Field(None, description="The ID of the user or org who created the file. Automatically added based on api key if not provided.")
    filename: Optional[str] = Field(None, description="The preferred name for the file. If not provided, the name of the uploaded file will be used.")
    kwargs: Optional[str] = Field(None, description="The file kwargs, containing any additional information about the file. This is a string sent in JSON format.")
