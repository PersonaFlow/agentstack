"""
migrations/script.py.mako
----------------------------


Alembic Migration Script Template

This script serves as a template for Alembic migrations. When Alembic auto-generates migration scripts, it uses
this template to structure the content. The generated script then gets saved in the 'versions' directory under 'migrations'.
Each script defines actions to be taken for both 'upgrade' (applying the migration) and 'downgrade' (reverting the migration).

"""

"""add checkpoints table

Revision ID: fa2c17415189
Revises: 42cb7889f092
Create Date: 2024-03-09 16:14:13.358092

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import (
    postgresql,
)  # Import additional modules dynamically based on the migration's needs.

# Revision identifiers, used by Alembic to identify the migration script.
revision = "fa2c17415189"  # The ID of this revision (migration).
down_revision = (
    "42cb7889f092"  # The ID of the previous revision. Specifies ordering of migrations.
)
branch_labels = None  # Labels that can group revisions together.
depends_on = None  # If this revision depends on another one, it is referenced here.


# Function to handle the 'upgrade' operation.
# This contains the operations to be performed when moving to this version from the previous version.
def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "checkpoints",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="A unique identifier for the checkpoint. It's a UUID type and is automatically generated by the database.",
        ),
        sa.Column(
            "user_id",
            sa.String(),
            nullable=False,
            comment="The ID of the user to whom the checkpoint belongs.",
        ),
        sa.Column(
            "thread_id",
            sa.String(),
            nullable=False,
            comment="The ID of the thread to which the checkpoint belongs.",
        ),
        sa.Column(
            "checkpoint",
            sa.LargeBinary(),
            nullable=False,
            comment="The serialized checkpoint data.",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="The timestamp when the checkpoint was created.",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="The timestamp when the checkpoint was last updated.",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="pyserver",
    )
    # ### end Alembic commands ###  # Operations to upgrade the database schema.


# Function to handle the 'downgrade' operation.
# This contains the operations to revert the changes introduced in the 'upgrade' function.
def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("checkpoints", schema="pyserver")
    # ### end Alembic commands ###  # Operations to downgrade the database schema.
