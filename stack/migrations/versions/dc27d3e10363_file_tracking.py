"""
migrations/script.py.mako
----------------------------


Alembic Migration Script Template

This script serves as a template for Alembic migrations. When Alembic auto-generates migration scripts, it uses
this template to structure the content. The generated script then gets saved in the 'versions' directory under 'migrations'.
Each script defines actions to be taken for both 'upgrade' (applying the migration) and 'downgrade' (reverting the migration).

"""

"""file tracking

Revision ID: dc27d3e10363
Revises: fa2c17415189
Create Date: 2024-04-04 13:22:09.020512

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import (
    postgresql,
)  # Import additional modules dynamically based on the migration's needs.

# Revision identifiers, used by Alembic to identify the migration script.
revision = "dc27d3e10363"  # The ID of this revision (migration).
down_revision = (
    "fa2c17415189"  # The ID of the previous revision. Specifies ordering of migrations.
)
branch_labels = None  # Labels that can group revisions together.
depends_on = None  # If this revision depends on another one, it is referenced here.


# Function to handle the 'upgrade' operation.
# This contains the operations to be performed when moving to this version from the previous version.
def upgrade() -> None:
    op.add_column(
        "assistants",
        sa.Column(
            "file_ids",
            postgresql.ARRAY(sa.String()),
            nullable=True,
            comment="A list of files to be associated with this assistant for use with Retrieval.",
        ),
        schema="pyserver",
    )
    op.add_column(
        "assistants",
        sa.Column(
            "kwargs",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="The assistant kwargs, containing any additional information about the assistant.",
        ),
        schema="pyserver",
    )
    op.create_index(
        op.f("ix_pyserver_assistants_user_id"),
        "assistants",
        ["user_id"],
        unique=False,
        schema="pyserver",
    )

    op.create_table(
        "files",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="A unique identifier for the file. It's a UUID type and is automatically generated by the database.",
        ),
        sa.Column(
            "user_id",
            sa.String(),
            nullable=False,
            comment="The ID of the user who created the file.",
        ),
        sa.Column(
            "filename", sa.String(), nullable=False, comment="The name of the file."
        ),
        sa.Column(
            "purpose",
            sa.String(),
            nullable=False,
            comment="The purpose of the file - either thread, assistants, or personas.",
        ),
        sa.Column(
            "mime_type",
            sa.String(),
            nullable=False,
            comment="The mime type of the file.",
        ),
        sa.Column(
            "source",
            sa.String(),
            nullable=False,
            comment="The source of the file. For local files, this will be the local file path plus filename and extension.",
        ),
        sa.Column(
            "bytes",
            sa.Integer(),
            nullable=False,
            comment="The bytes of the file. (Added automatically when file is uploaded)",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Created date",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Last updated date",
        ),
        sa.Column(
            "kwargs",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Any additional information to be included for the file.",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="pyserver",
    )
    op.create_index(
        op.f("ix_pyserver_files_created_at"),
        "files",
        ["created_at"],
        unique=False,
        schema="pyserver",
    )
    op.create_index(
        op.f("ix_pyserver_files_user_id"),
        "files",
        ["user_id"],
        unique=False,
        schema="pyserver",
    )

    op.alter_column("messages", "type", new_column_name="role", schema="pyserver")
    op.alter_column(
        "messages",
        "additional_kwargs",
        new_column_name="kwargs",
        type_=postgresql.JSONB(astext_type=sa.Text()),
        schema="pyserver",
    )

    op.alter_column(
        "threads",
        "additional_kwargs",
        new_column_name="kwargs",
        type_=postgresql.JSONB(astext_type=sa.Text()),
        schema="pyserver",
    )
    op.create_index(
        op.f("ix_pyserver_threads_updated_at"),
        "threads",
        ["updated_at"],
        unique=False,
        schema="pyserver",
    )

    op.alter_column(
        "users",
        "additional_kwargs",
        new_column_name="kwargs",
        type_=postgresql.JSONB(astext_type=sa.Text()),
        schema="pyserver",
    )

    op.create_index(
        op.f("ix_pyserver_checkpoints_thread_id"),
        "checkpoints",
        ["thread_id"],
        unique=False,
        schema="pyserver",
    )

    # ### end Alembic commands ###  # Operations to upgrade the database schema.


# Function to handle the 'downgrade' operation.
# This contains the operations to revert the changes introduced in the 'upgrade' function.
def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_column("assistants", "kwargs", schema="pyserver")
    op.drop_column("assistants", "file_ids", schema="pyserver")

    op.alter_column(
        "messages",
        "kwargs",
        new_column_name="additional_kwargs",
        type_=postgresql.JSONB(astext_type=sa.Text()),
        schema="pyserver",
    )
    op.alter_column("messages", "role", new_column_name="type", schema="pyserver")
    op.alter_column(
        "threads",
        "kwargs",
        new_column_name="additional_kwargs",
        type_=postgresql.JSONB(astext_type=sa.Text()),
        schema="pyserver",
    )
    op.alter_column(
        "users",
        "kwargs",
        new_column_name="additional_kwargs",
        type_=postgresql.JSONB(astext_type=sa.Text()),
        schema="pyserver",
    )

    op.drop_table("files", schema="pyserver")

    op.drop_index(
        op.f("ix_pyserver_checkpoints_thread_id"),
        table_name="checkpoints",
        schema="pyserver",
    )
    op.drop_index(
        op.f("ix_pyserver_assistants_user_id"),
        table_name="assistants",
        schema="pyserver",
    )
    op.drop_index(
        op.f("ix_pyserver_threads_updated_at"), table_name="threads", schema="pyserver"
    )
