from datetime import datetime
import uuid
from sqlalchemy import String, text, DateTime, func, Boolean, ForeignKey
from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy.dialects.postgresql import UUID
from stack.app.core.configuration import settings
from stack.app.model.base import Base


class Message(Base):
    __tablename__ = "messages"
    __table_args__ = {"schema": settings.INTERNAL_DATABASE_SCHEMA}

    id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=True),
        primary_key=True,
        server_default=text("gen_random_uuid()"),
        comment="A unique identifier for the message. It's a UUID type and is automatically generated by the database.",
    )
    thread_id: Mapped[str] = mapped_column(
        UUID(as_uuid=True),
        ForeignKey(f"{settings.INTERNAL_DATABASE_SCHEMA}.threads.id"),
        nullable=False,
        index=True,
        comment="The ID of the thread to which this message belongs.",
    )
    user_id: Mapped[str] = mapped_column(
        String(),
        ForeignKey(f"{settings.INTERNAL_DATABASE_SCHEMA}.users.user_id"),
        comment="The ID of the user who sent the message.",
    )
    assistant_id: Mapped[str] = mapped_column(
        UUID(as_uuid=True),
        ForeignKey(f"{settings.INTERNAL_DATABASE_SCHEMA}.assistants.id"),
        comment="The ID of the assistant that processed the message.",
    )
    content: Mapped[str] = mapped_column(
        String(), comment="The content of the message."
    )
    role: Mapped[str] = mapped_column(
        String(), comment="The type of message (e.g., text, image, etc.)."
    )
    example: Mapped[Boolean] = mapped_column(
        Boolean(),
        nullable=True,
        comment="Indicates whether the message is an example message for training or demonstration purposes.",
    )
    kwargs: Mapped[str] = mapped_column(
        String(),
        nullable=True,
        comment="Additional arguments associated with the message.",
    )
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        default=func.now(),
        nullable=False,
        comment="Created date",
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        default=func.now(),
        onupdate=func.now(),
        nullable=False,
        comment="Last updated date",
    )

    thread = relationship("Thread", back_populates="message")

    user = relationship("User", back_populates="message")
