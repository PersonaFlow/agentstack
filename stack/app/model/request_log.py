import uuid
from datetime import datetime

from sqlalchemy import Integer, String, text
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import Mapped, mapped_column

from stack.app.core.configuration import settings
from stack.app.model.base import Base


from datetime import datetime
import uuid
from sqlalchemy import String, text, DateTime, Integer, Float
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy.dialects.postgresql import UUID, JSONB
from stack.app.model.base import Base


class RequestLog(Base):
    __tablename__ = "request_logs"
    __table_args__ = {"schema": settings.INTERNAL_DATABASE_SCHEMA}

    id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=True),
        primary_key=True,
        server_default=text("gen_random_uuid()"),
        comment="A unique identifier for the log entry. It's a UUID type and is automatically generated by the database.",
    )
    timestamp: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        default=datetime.utcnow,
        nullable=False,
        comment="The time when the log entry was created. Defaults to the current time.",
    )
    host: Mapped[str] = mapped_column(
        String(),
        nullable=True,
        comment="The host (i.e., IP address) from which the request originated.",
    )
    request_id: Mapped[str] = mapped_column(
        String(),
        nullable=True,
        comment="An identifier for the request, used for correlating logs.",
    )
    endpoint: Mapped[str] = mapped_column(
        String(), nullable=True, comment="The API endpoint that was accessed."
    )
    method: Mapped[str] = mapped_column(
        String(),
        nullable=True,
        comment="The HTTP method (e.g., GET, POST) used for the request.",
    )
    headers: Mapped[dict] = mapped_column(
        JSONB(), nullable=True, comment="The HTTP headers associated with the request."
    )
    query_parameters: Mapped[dict] = mapped_column(
        JSONB(), nullable=True, comment="The query parameters from the request URL."
    )
    request_body: Mapped[dict] = mapped_column(
        JSONB(), nullable=True, comment="The body of the request, stored as JSON."
    )
    response_body: Mapped[dict] = mapped_column(
        JSONB(), nullable=True, comment="The body of the response, stored as JSON."
    )
    status_code: Mapped[int] = mapped_column(
        Integer,
        nullable=True,
        comment="The HTTP status code returned by the API for the request.",
    )
    response_time: Mapped[float] = mapped_column(
        Float,
        nullable=True,
        comment="The time it took for the API to process the request.",
    )
