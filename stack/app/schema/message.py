"""
schema/message.py
---------------

This module provides Pydantic models for message data serialization, validation, and response formatting.

"""
import enum
from pydantic import BaseModel, Field, field_validator
from typing import Optional
import uuid
from datetime import datetime


class MessageType(str, enum.Enum):
    AI = "AI"
    Human = "Human"
    Function = "Function"
    Tool = "Tool"


class Message(BaseModel):
    id: uuid.UUID = Field(
        ...,
        description="A unique identifier for the message. It's a UUID type and is automatically generated by the database.",
    )
    thread_id: Optional[uuid.UUID] = Field(
        ..., description="The thread id associated with the message."
    )
    user_id: str = Field(..., description="The user id associated with the message.")
    assistant_id: Optional[uuid.UUID] = Field(
        None, description="(Optional) The assistant id associated with the message."
    )
    content: str = Field(..., description="The content of the message.")
    type: MessageType = Field(
        ..., description="The type of message - eg. 'AI', 'Human', 'Function', 'Tool'."
    )
    additional_kwargs: Optional[dict] = Field(
        None,
        description="(Optional) Additional keyword arguments associated with the message.",
    )
    example: bool = Field(
        ..., description="A boolean flag indicating whether the message is an example."
    )
    created_at: datetime = Field(
        ..., description="The date and time when the message was created."
    )
    updated_at: datetime = Field(
        ..., description="The date and time when the message was last updated."
    )

    class Config:
        from_attributes = True
        json_encoders = {
            datetime: lambda v: v.replace(microsecond=0).isoformat(),
        }


class CreateMessageSchema(BaseModel):
    thread_id: str = Field(
        ..., description="The thread id to associate the message with.", min_length=1
    )
    user_id: Optional[str] = Field(
        ..., description="The user id associated with the message."
    )
    assistant_id: str = Field(
        None, description="(Optional) The assistant id associated with the message."
    )
    content: str = Field(..., description="The content of the message.", min_length=1)
    type: str = Field(
        ...,
        description="The type of message - eg. 'AI', 'Human', 'Function', 'Tool'.",
        min_length=1,
    )
    additional_kwargs: Optional[dict] = Field(
        None,
        description="(Optional) Additional keyword arguments associated with the message.",
    )
    example: bool = Field(
        ..., description="A boolean flag indicating whether the message is an example."
    )

    @field_validator("thread_id", "user_id", "content", "type")
    def must_not_be_empty(cls, v):
        if not v:
            raise ValueError("This field must not be empty")
        return v


class UpdateMessageSchema(BaseModel):
    assistant_id: Optional[str] = Field(
        None, description="(Optional) The assistant id associated with the message."
    )
    content: Optional[str] = Field(
        None, description="(Optional) The content of the message."
    )
    additional_kwargs: Optional[dict] = Field(
        None,
        description="(Optional) Additional keyword arguments associated with the message.",
    )
